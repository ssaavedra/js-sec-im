<html>
<head>
<title>./elapse.js</title>
<style>
body {
padding:0px;
margin:0px;
border:0px;
background-image:url(http://ats.oka.nu/background.png);
background-repeat:repeat-y;
background-position: center center;
background-color:#ffffff;
font-family: "Arial", sans-serif;
/*font-family: sans-serif; */
}
#d1 {
text-align:center;
width:100%;
}
#d2 {
border:0px solid gray;
text-align:left;
min-width:none;
width:650px;
margin-left:auto;
margin-right:auto;
padding:30px;
}
</style>
</head>
<body>
<div id="d1">
<pre id="d2">


    <a href="./elapse.js">elapse.js</a>

                                                           Titaniumcore Project
================================================================================
Atsushi Oka [ <a href="http://oka.nu/">http://oka.nu/</a> ]                                       Jan 11,2009

<a href="./elapse.js">elapse.js</a> is a simple profiling tool that will help you to measure
performance of JavaScript application.

Linking
    <a href="./elapse.js">elapse.js</a> requires <a href="./trace.js">trace.js</a>

        &lt;script src="./tools/trace.js"&gt;&lt;/script&gt;
        &lt;script src="./tools/elapse.js"&gt;&lt;/script&gt;

Examples

    1.
        var et = ElapsedTime.create( "test1" );
        et.start();
        for ( var i=0;i&lt;100;i++ ) {
            proc();
        }
        et.stop();

        // Prints the elapsed time.
        et.print(); 


    2.
        var et = ElapsedTime.create( "test1" );
        for ( var ii=0;ii&lt;100;ii++ ) {
            et.start();
            for ( var i=0;i&lt;100;i++ ) {
                proc();
            }
            et.stop();
        }

        // Prints total time, executed count and average time.
        ElapsedTime.display();


    3.
        var et1 = ElapsedTime.create( "test1" );
        var et2 = ElapsedTime.create( "test2" );
        for ( var ii=0;ii&lt;100;ii++ ) {
            for ( var i=0;i&lt;100;i++ ) {
                et1.start();
                proc1();
                et1.stop();
                et2.start();
                proc2();
                et2.stop();
            }
        }

        // Print two statistics.
        ElapsedTime.display();


Reference

    ElapsedTime.create( name )
        Factory method that returns ElapsedTime object.

    ElapsedTime.prototype.start = function( name )
        Start timing.

    ElapsedTime.prototype.stop = function()
        Stop timing.

    ElapsedTime.prototype.print = function()
        Print the time. ( Requires trace.js. )

    ElapsedTime.prototype.get = function()
        Returns the time in milliseconds.

    ElapsedTime.prototype.name = function()
        Returns name of this object.


    ElapsedTime.display( name )
        Print the specified profiled time. 
        Print all profiled times when name parameter is omitted.
        (Requires trace.js.)



--- Author ---
====================================================================================

Copyright(c) 2009 Atsushi Oka [ <a href="http://oka.nu/">http://oka.nu/</a> ]
This script file is distributed under the LGPL


</pre>
</div>
</body>
</html>
